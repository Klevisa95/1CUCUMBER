Java - is a programing language.

Selenium -  is a tool for automating web browsers.

Cucumber - is a tool for writing and running automated tests in plain language called gherkin.
It helps you describe how a web application should behave in human-readable sentences,
making it easier to understand and share with non-technical team members.

-No main method for execution - no control of execution
-Smoke Testing-To ensure the most critical functions of the software work after a new build or update.
-Regression- To ensure that new code changes havenâ€™t introduced new bugs or broken existing functionality.

Framework - is a structure that guides how to write and execute tests in a consistent way.

Cucumber as a tool: explained in packages/classes
Cucumber/BDD as a framework: behavior driven development is a technique where your test cases are written in plain English language


HOW TO CREATE A NEW PROJECT IN CUCUMBER:
1-File-new-Project-Maven-groupId-artifactId-create
2-Delete main folder
3-Open resources in Java folder

group Id-the name of the organisation you work for (for now write syntax)
artifact Id-name of the project

1.click pom.xml file + add dependencies

src/main: here we write the code to develop the application.
src/test: here we write th code to test the application.
Here we delete main folder because we will work with test we only need the Test folder.

In Java - we keep all java stuff (classes and packages)
In resources - we keep all the non java stuff

In selenium we don't have reporting option, no execution control, no standart format
of writing the code. To achieve all these, we need to integrate our scripts
with additional tools and structure (framework).

In our cucumber project we need:
java- selenium-cucumber-apache poi dependencies.

CUCUMBER AS A TOOL EXAMPLE
User Story: 1234 - Valid admin login
Scenario:

GIVEN - pre condition
WHEN - actions
THEN -expected result
AND - supporting tag

Given user is navigated to HRMS application
When user enters admin username and password
And user clicks on login button
Then admin user is successfully logged in
(shkruhet ne veten e trete ai/ajo)

IN CUCUMBER EVERY TEST CASE WILL BE CONSIDERED AS A SCENARIO

We write scenario in a file called feature file.
extension.feature


STEPS
1.Delete main
2.Right click on 'test' create resources.
3.Create Login.features under resources.
4.Create the Scenario in Login.feature class and press Run.
5.All the steps will show in the console.
6.Copy the steps and create a 'steps' package in Java also create a class LoginSteps and paste the steps there.
7.go to login.feature, right click, press 'go to' + declaration. (like that you link the login feature with the login steps).

RULES FOR WRITING THE SCENARIO:
-once  the step definition is created don't add any space or any other character on it
-don't create duplicate steps, steps have to be unique

CUCUMBER ENCOURAGES CODE REUSABILITY (to reuse a code dmth mos me shkr sh her t njejten por me riperdor)



USER STORY NR 2 - Employee search
Scenario-search employee by id
since i already finished the first 4 steps use the same ones (code reusability) just add one more step in another class
called Employee.feature.
Separate cases for separate user stories.

Scenario: Valid admin login
    Given user is navigated to HRMS application
    When user enters admin username and password
    And user clicks on login button
    Then user is successfully logged in
    When user clicks on PIM option
    And user clicks on Employee List Option
    When  user enters employee id
    And user clicks on search button
    Then user should be able to see employee details

I copy paste kto steps tek EmployeeSearch.feature dhe Run. Ne console shikon steps
qe duhet te besh copy dhe paste tek EmployeeSteps.
Remember for feature file we need step definitions to execute a code.

RUNNER CLASS- we use this class to execute specific scenarios if we don't want to execute all of them. (create this package under java)
In Runners package we will create all the test runner classes.

UTILS-COMMON METHODS- this class contains methods which are commonly used across different pars of a program

*There is a need through which I can execute one scenario among multiple. Qe t'mos i run tgjith scenarions gjithmone duhet ti vesh tags qe t mund t exetute dhe vec e vec.
*We use "or" keyword to execute scenarios from either conditions
if one condition is true, it will execute the scenarios.
*We use "and" keyword to execute the scenarios when both conditions must be true.
*Tags in runner class and in scenarios have to be the same


*Cross browser testing --> when script execute against multiple browsers

*Centralized Configuration: All configuration details are managed in a single file.
 Easy Maintenance: Any change to the configuration can be done in the .properties file without touching the test code.
 Reusability: This setup allows you to reuse the same configuration across different test classes and scenarios.
 This is how the ConfigReader class fits into a Cucumber-based automation framework, helping to manage test configurations effectively.


*Tek Utils shto dhe config reader dhe constants te cilat kane methods you can call them to reuse the code so you don't have to write some specific code over & over again.
Pastaj tek stepdeffinitions e Zevendson kodin e gjate, you call the short methods.

Pasi i ke shkr methods ne CommonMethods shko tek LoginSteps.Java dhe zevendso methods per short code.
Pastaj tek EmployeeSeardch steps shkr kodin e shkurter qe i lexon nga klasat qe kane kode per tu riperdor.


*NEVER add a @tag before writing the Feature

FILE PATH:
C:\Users\klevi\IdeaProjects\1CUCUMBERsrc\test\resources\config\config.properties
C:\Users\klevi\IdeaProjects\1CUCUMBER\src\test\resources\config\config.properties



*HOOKS --> a separate class in framework to write a pre condition and post condition so you don't have to rewrite them all the time in every scenarion in different feture files.
When we execute the code, hooks class will execute pre condition first and then all the test cases will be executed
and then post condition will execute last.
*DON'T FORGET TO COMMENT STEPS FROM ALL FEATURE FILES FOR PRE AND POST CONDITION
per te execute te gjitha file features same time put @test tags tek te gjitha si common tag dhe shko tek steps="@test" that's how you execute all of them same time

*In the framework we cannot pass any hard coded data, cucumber allows us to perform data driven testing.

*//perdor @Background per common steps

*data driven testing --> when one scenario executed against multiple set of data, we call it data driven testing approach. (video 5)

<<<<<<< HEAD
*Scenario: Runs once with a single set of data.
*Scenario Outline: Runs multiple times with different sets of data using the Examples table.
*ORDER OF EXECUTION--> HOOKS - BACKGROUND - SCENARIO

Summary of Execution Order:
@Before hooks
Background steps (if any)
Scenario steps
@After hooks
=======
>>>>>>> origin/master

*Page Object Model -->The Page Object Model (POM) is a design pattern used in Selenium and Cucumber to create an organized and reusable structure for web page automation.
example:
Page Class: Holds the web elements and methods for interacting with a specific page.
Step Definitions: Use the Page Class methods to interact with the web page in a structured way.
Feature File: Contains the scenario in plain language.


*Constructor we use to initialize the object and the elements of the class we will call selenium page factory
to initialize all elements of the class and we call it constructor.s


Step-by-Step Opening Order Recap:
Step 1: Start with the Page Object Model classes in the pages package (like LoginPage).
Step 2: Define the Step Definition classes in the steps package (like LoginSteps, AddEmployeeSteps).
Step 3: Set up runner classes in the runners package to execute your tests.
Step 4: Use utility classes (CommonMethods, ConfigReader) from the utils package for reusable code.
Step 5: Organize your Cucumber feature files under the resources/features folder and use hooks for setup and teardown in Hooks.java.



*Write some data google sheets - save it as excel file - copy paste it in testdata folder
*to read it create Excel Reader class
*We can achieve data driven testing using data table, examples table and using excel file when the volume of data is big

Data Table vs Examples Table
data table is specific for just one step.
However, examples table is for complete scenario.

Page initializer class --> to create objects of the classes. We call this in CommonMethods.


Reporting in Framework--> means how many test cases you've executed
To open report right click on the report - open in - browser - chrome

We have to add maven mojo to pom.xml to generate reports.

In target open cucumber htmls reports -  overview features.html - open in - browser - chrome  (aty eshte detailed report).


Scenario class --> holds the complete status of the execution such as test case name, status etc

ASSERTIONS- Assertions make sure the application works as expected by comparing results within Cucumber scenarios.
assertTrue(condition): Passes if the condition is true.
assertFalse(condition): Passes if the condition is false.
assertEquals(actual, expected): Passes if actual equals expected.




======================================================================================================================================================================================================================================================
=============================================================================================================================================================================================================================================================
============================================================================================================================================================================================================================

************************  API  ************************

CLASS 01

Presentation Layer : what we see on screen (buttons, menus, dropdowns).
Application Layer  : where the business logic is written.
Data Layer         : where the data comes from (database).

1 Tier Architecture: when your presentation layer, application and layer are available at one place.
2 Tier Architecture: when the presentation layer is available at one place and data layer is available at another layer.
3 Tier Architecture: when presentation layer is available at one place, application layer at a second place and data layer at a 3rd place.

Standalone App     : desktop based application.

N-Tier Architecture (distributed architecture) (fb,ig examples):
-it's an extended version of 3Tier architecture

To Connect All These Systems We Need API.
-to make the communication between the systems developed in different programming languages
-to maintain the security of the data

front end - selenium
back end  - sql

To identify the glitch in the API, we need to TEST them.
Swagger Document- it is the centralized document we have for the API testing and the instructions (we get this doc from scrum master od development team)

BASE URL  : www.amazon.com
END POINTS: /toys, /homedecor etc

API's which are hosted over the internet are called web services.
All web services are API's but all API's are NOT web services.

Operations Performed in API testing: CRUD OPERATIONS
1.Create
2.Retrieve
3.Update
4.Delete
 =CRUD


HTTP - hyper text transfer protocol - this is the internet protocol which we used to communicate with the website.

=======================================================================================================

CLASS 02

2 types of web services:
REST - representational state transfer, fast, less secured,
SOAP - simple object access protocol. slow, more secured,

* WE WILL WORK WITH REST API
STATEFUL application: when the server memory state is set to true, we call it stateful application. Disadvantage: not safe
STATELESS application: here the state of the server memory is set to false.
In stateless app we work with sessionId/Tokens

URI=URL+ENDPOINT

JWT is of 3 types:
Bearer token
Grants
MAC token


STEP BY STEP:
1.Download Postman
New Collection - Rename - Add request - Create an admin -take the base url: hrm.syntaxtechs.net/syntaxapi/api + get the end point of ''CREATE USER''and paste at post + shko tek body check 'raw' 'Json' + add the data : {
                                                                                                                                                                                                                              "name": "adminbatch177",
                                                                                                                                                                                                                              "email": "test@batch177.com",
                                                                                                                                                                                                                              "password": "Test@1233"
                                                                                                                                                                                                                          }                                        + shko tek 'Headers' Key:content-type, Value:application/json, + SAVE + SEND (nqs ska BODY  ne method ateher ska as head)






2.Go to syntaxbatchapi 3 pika click add request - Rename it Generate token - select method 'Post' - paste the link and end point of generate token - click Body - raw -json - paste the data: {
                                                                                                                                                                                "email": "string",
                                                                                                                                                                                "password": "string"
                                                                                                                                                                              }                                 - go to headers Key: content type - value: application/json  - save - send -




3.same steps to create an employee - ktu duhet me paste token tek authorization - send

4.Getanemployee e njejta process



=====================================================================================================================================================


CLASS 3

QUERY parameter - is extra information added to a URL after a ?
exmpl:
https://example.com/search?query=java

-When you work with stateful application, instead of bearer token you should select "basic auth " in authorization tab then enter username and password and save it.



5. get job titles - mos add as head as body just send dhe do dali lista me jobs positions

6. update the employee - here we change complete data (data e gjen tek hrm swagger page )

7.partially update the employee


-PUT: to update the data completely
-PATCH: to update the info partially
-Delete employee
*cdo 12 ore update the Token.


========================================================================================================================================

CLASS 04
1.create Environments (here add base url : hrm.syntaxtechs.net/syntaxapi/api)
 and  Globals (here add: CreateAdminUser + endpoint etc me rradhe te gjitha shiko Postman per shembuj)

 2.Tek search zevendso full link me: {{QABaseUrl}}{{CreateAdminUser}} t gjitha me rradhe

 3.Tek global variable vendos JWT (the token) so you don't have to update it everyday tek cdo (post-get-put etc).

 4.shko tek create an employee dhe tek KEY add this authorization and JWT

 5.then go back to Authorization and click "no auth" (dhe kte beje per tgjitha ne liste (put-get-post etc)

 6.pastaj click 3 pikat + click ''run collection'' +

*Postman has all the methods define in it.
Pm is the postman  object for chai assertion library which gives us all the assertions
via this library we can validate anything.

validate status code
validate response time
validate message from the body
validate key va value


pm.test("Validate key and value", function(){
    const responseJson = pm.response.json();
    pm.expect(responseJson.employee.emp_firstname).to.eql("molapipilola");
});


validating the value in json format



****************************** Rest Assured**************************


-Rest Assured is a DSL (domain specific language) which means it's designed to make API testing easier to understand and write. It lets you write tests that look almost like simple English sentences.
Instead of manually handling HTTP requests, you use Rest Assured to make requests and check responses in a clean, easy way.

given().
    baseUri("https://api.example.com").
when().
    get("/users").
then().
    statusCode(200);

IN API TESTING:
given(): to prepare the request (e.g., base URL) - precondition
when(): send the request (like GET, POST) - to perform the action
then(): check the response (e.g., status code 200) - verification

This makes it simple to test APIs.


-while in postman in all MANUAL testing.
-rest web services this allows us to send data in json format.
-JSON consist of key and value pairs.

IN API theres manual testing via Postman and automate via RestAssured

To verify and validate the data from the body use Hamcrest Matchers.
This class contains methods to performs assertions.
jsonPath --> this is class
jsonPAth()--> this is the method of jsonPath class


JUnit is a popular unit testing framework for Java programming. It helps developers write and run repeatable tests for their Java code, ensuring that individual units (methods or classes) work as expected.

Key Features of JUnit:
Annotations: JUnit uses annotations to define test methods and manage the test life cycle.

@Test: Marks a method as a test method.
@BeforeEach / @Before: Runs before each test method to set up any preconditions.
@AfterEach / @After: Runs after each test method to clean up resources.
@BeforeAll / @BeforeClass: Runs once before all test methods in a class, typically used for setup that's shared across tests.
@AfterAll / @AfterClass: Runs once after all tests, often used to clean up shared resources.
Assertions: JUnit provides several assertion methods to verify that the test results are as expected.

assertEquals(expected, actual): Verifies that the expected and actual values are equal.
assertTrue(condition): Ensures that a condition is true.
assertFalse(condition): Ensures that a condition is false.
assertNotNull(object): Ensures that the object is not null.

Test Runners: JUnit test runners execute the tests and report the results. Modern IDEs (like IntelliJ or Eclipse) and build tools (like Maven or Gradle) support running JUnit tests.

Parameterized Tests: JUnit allows you to run the same test with different data using parameterized tests.

Integration: JUnit integrates well with popular Java build tools (e.g., Maven, Gradle), continuous integration tools (e.g., Jenkins), and other testing libraries like Selenium or TestNG.

JUnit is commonly used in Test-Driven Development (TDD) practices, where tests are written first, and then the code is written to pass those tests.

*In API.feature we write all gherkin scenarios to execute and validate
to keep step definitions, we have to create another steps package for API
just to avoid hooks in API, we need new steps package

Hamcrest Matchers --> equalTo (it has assertions, through which we verify all keys and values of the body, response headers and messages).

we are validating the status of the code
we are validating the body of the response
we are validating the headers of the response
we are validating the messages od the body


Feature: "Login Functionality" â€“ Describes the feature you are testing.
Scenario: "Successful login with valid credentials" â€“ A single test case.
Given: Describes the initial context, like "I am on the login page."
When: The action you perform, such as "I enter valid username and password."
Then: The expected outcome, like "I should be redirected to the dashboard."












